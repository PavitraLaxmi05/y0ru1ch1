[
  
  {
    "title": "PicoGym web Exploitation- Medium writeups",
    "url": "/posts/picoCTF_Medium/",
    "categories": "CTF, PicoCTF",
    "tags": "picoCTF",
    "date": "2025-06-11 00:00:00 +0530",
    "content": "Pick your SQL exploit    Explanation  Discovered a SQL injection vulnerability in a library search feature. By manipulating the input, I accessed hidden database tables and uncovered one called library_secrets.    After exploring its structure, I retrieved a secret flag stored inside. This challenge demonstrated classic UNION-based SQLi in a SQLite backend. Flag successfully exfiltrated! üèÅ  Flag: picoCTF{SQL_UNION_4774CK_82de4969} "
  },
  
  {
    "title": "WWCTF 2025 writeups",
    "url": "/posts/WWCTF/",
    "categories": "CTF, WWCTF",
    "tags": "WWCTF",
    "date": "2025-06-11 00:00:00 +0530",
    "content": "WWCTF  WWCTF (World Wide Capture The Flag) is an international cybersecurity competition that brings together enthusiasts, students, and professionals to test and enhance their skills in various fields of cybersecurity. It follows the Capture The Flag (CTF) format, where participants solve challenges to capture ‚Äúflags‚Äù ‚Äî pieces of text that prove they‚Äôve solved a problem.  WWCTF includes a wide spectrum of categories such as:  Web Exploitation: Identify flaws in web apps like XSS, SQLi, SSRF, etc.  Pwn: Analyze and exploit binary vulnerabilities (buffer overflows, format strings).  Reverse Engineering: Understand how binaries or software work by deconstructing them.  Cryptography: Break or exploit flawed encryption schemes.  Forensics: Recover data from network traffic, memory dumps, or disk images.  OSINT: Use open-source information to gather clues.  OSINT  Lost 1    Explanation:    I uploaded the provided image to Google Lens, which is great for reverse image searching based on visual similarity.Google Lens quickly matched the scene with images from Sea Panedrom in Nice, Fabron (France).I searched ‚ÄúSea Panedrom, Nice, Fabron‚Äù on Google Maps.The buildings and layout were identical, confirming this was the correct location.Once the correct spot was located, I copied the latitude and longitude.I formatted them as required and submitted them as the flag.  Flag: wwf{43.688,7.236}  Web    In the Domain of Doom challenge, I analyzed the Flask source code and discovered a hidden /flag route that returned the flag from an environment variable. By directly visiting /flag in the browser, I was able to retrieve the flag without needing to bypass input filters or trigger any injections.  Flag: wwf{Command_1nj3ctI0n_l5_c0ol}  Community  Community chalenge    In the Community Challenge, I joined the official Discord server and navigated to the #community-challenge channel. From the pinned messages, I found a YouTube video link. Checking the video‚Äôs comment section, I discovered the flag hidden in one of the top comments ‚Äî solving the challenge by simply exploring the community resources as hinted.  Flag: wwf{tk4nk_y4ll_f0r_p4rtjcjp4tjnq_jn_tk3_ck4ll3nq3} "
  },
  
  {
    "title": "SmileyCTF 2025 writeups",
    "url": "/posts/SmileyCTF/",
    "categories": "CTF, SmileyCTF",
    "tags": "SmileyCTF",
    "date": "2025-06-11 00:00:00 +0530",
    "content": "SmileyCTF 2025  About SmileyCTF: Official URL: https://play.ctf.gg/   SmileyCTF is a well-organized,jeopardy-style Capture The Flag competition hosted by the  American CTF team.Known for its creative challenges and beginner-friendly tone(with a few nasty surprises for veterans),SmileyCTF 2025 did not disappoint! The CTF featured a wide range of categories including Pwn,Crypto,Web,Reversing,Misc,Block chain.  OSINT  SKY    Explanation:    I used Google Lens to scan the image and identified the location as San Diego,USA.After extracting the coordinates,I subbmitted my proof of work and entered the coordinates and successfully obtained the flag.  Flag: .;,;.{g00gl3_ai_th1nks_th3s3_pr0duc3_r3n3w3bl3_3n3rgy_1ma0}  "
  },
  
  {
    "title": "PicoGym web Exploitation- Easy writeups",
    "url": "/posts/PicoCTF/",
    "categories": "CTF, PicoCTF",
    "tags": "picoCTF",
    "date": "2025-06-11 00:00:00 +0530",
    "content": "picoCTF    About picoCTF: picoCTF is a cybersecurity competition for middle and high school students, but it‚Äôs also an amazing playground for anyone new to CTFs. It features a wide variety of challenges in areas like:  Binary Exploitation  Web Exploitation  Forensics  Cryptography  Reverse Engineering  General Skills  Each challenge gives a practical exposure to real-world hacking techniques‚Äîsafely and legally.  This is their Official webpage - https://picoctf.org/  This is their url for picoGym - https://play.picoctf.org/practice  Cookie Monster Secret Recipe   Explanation: After accessing the website, we are greeted with a login page prompting for a username and password. Upon entering random credentials, the login attempt fails. However, an interesting hint is displayed: ‚ÄúCheck the cookie.‚Äù    Inspecting the browser‚Äôs cookies, we notice one that appears to be Base64-encoded. This suggests the application might be storing flag in a way that can be decoded and potentially manipulated.    Finally got the flag,  Flag: picoCTF{c1e_m0nster_l0ves_c00kies_6C2FB7F3}  SSTI   Explanation: After launching website,We identified an SSTI vulnerability by injecting a Jinja2 payload ({{7*7}} ) and confirmed code execution using os.popen. Then, we listed directories, found the flag at /challenge/flag, and read it using a Jinja2-based payload to extract the flag.    Flag: picoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_73c99823}  WebDecode    Explanation: After launching the instance, the website loaded successfully. I began by inspecting the webpage for any hidden elements or clues that might contain the flag. During this inspection, I discovered a suspicious-looking string that appeared to be Base64-encoded.    I copied the encoded text and decoded it using shell. Upon decoding, the hidden message was revealed ‚Äî it was the flag.  Flag: picoCTF{web_succ3ssfully_d3c0ded_10f9376f}  Unminify    Explanation: After Launching the instance, I began to view sourc code by clicking ctrl+u and then the code is in a single line. After by clicking ctrl+f, I searched for picoCTF and got through all chances and got the flag.  Flag:picoCTF{pr3tty_c0d3_b99eb82e}  Bookmarklet    Explanation:  After launching the website, There is javascript code is displayed on the webpage and the flag is encrypted and stored in a variable. The code is given to get the decrypted flag. So I copied the code and executed using vscode and got the real flag.    Flag: picoCTF{p@g3_turn3r_1d1ba7e0}  Inspect HTML    Explanation:  After Launching Instance, The website is loaded. As the challenge name I inspected the website and got the flag in HTML code.    Flag: picoCTF{1n5p3t0r_0f_h7ml_8113f7e2}  Intro to Burp    Explanation:  After launching the instance, I was greeted with a registration form. I filled in the required details and submitted the form. As expected, the application implemented two-step verification and prompted me for an OTP.  Here‚Äôs where the twist came in.  I intercepted the OTP request using Burp Suite, and entered a random OTP, it displays the otp in the request.    I simply removed the OTP parameter from the request before forwarding it.Surprisingly, the server didn‚Äôt validate the missing OTP properly and directly granted access ‚Äî revealing the flag on the next page!  Flag: picoCTF{#0TP_Bypvss_SuCc3$S_e1eb16ed}  n0s4n1ty 1    Explanation:  After loading the website, I noticed a file upload option. Upon attempting to upload a file, an error was shown. Inspecting the source code revealed the site was running on an Apache server, indicating a potential for PHP code execution. I crafted a PHP file containing &lt;?php system($_GET[‚Äòmycommand‚Äô]); ?&gt; and uploaded it. Once the file was uploaded, I modified the URL to pass system commands through the mycommand parameter, which successfully executed on the server and revealed the flag.    Flag: picoCTF{wh47_c4n_u_d0_wPHP_5f894f6c}  head-dump    Explanation:  After launching the instance, I was presented with a simple blog, as described in the challenge. While exploring, I noticed a #API Documents hashtag. Clicking on it redirected me to the Swagger UI. There, I found a GET /headdump endpoint.    Executing this request returned a PDF file. I opened it and used Ctrl+F to search through the content‚Äîthis revealed the flag embedded within the document.  Flag: picoCTF{Pat!3nt_15_Th3_K3y_f1179e46}  Local Authority    Explanation:  After launching the instance, I was greeted with a simple login page. I tried logging in with random credentials, but it returned a ‚Äúlogin failed‚Äù message.  Curious, I opened the browser‚Äôs developer tools and started inspecting the page. While looking through the source code, I discovered a JavaScript file named secure.js. On examining the contents of this file, I found hardcoded admin credentials.  I went back to the login page, entered the admin username and password found in secure.js, and successfully logged in and the flag was revealed on the dashboard.  Flag: picoCTF{j5_15_7r4n5p4r3n7_a8788e61}  Includes    Explanation:  After launching the instance, the website loaded with some basic content and a button labeled ‚ÄúSay Hello‚Äù. Clicking the button triggered a message saying:  ‚ÄúThis code is in a separate file!‚Äù  That was my cue to dig deeper.  I opened the browser‚Äôs developer tools and started inspecting the source files. In the script.js file, I found half of the flag cleverly hidden in a comment. Continuing the search, I checked style.css‚Äîand there it was‚Äîthe other half of the flag, also hidden within a comment.  Combining both parts gave me the complete flag.      Flag: picoCTF{1nclu51v17y_1of2_f7w_2of2_b8f4b022}  Cookies    Explanation: After launching the instance, I inspected the website and noticed that changing the cookie value resulted in different cookie names appearing.    I began testing by incrementing the cookie value step by step. At value 18, the flag was revealed.  Flag: picoCTF{3v3ry1_l0v3s_c00k135_bb3b3535}  Scavenger Hunt    Explanation:  After launching the instance, I explored the website and began inspecting the source files.Using the hints provided on the site, I checked the HTML and CSS files and discovered parts of the flag hidden in comments and code.By piecing together all the parts from different files, I was able to reconstruct the full flag.  Flag: picoCTF{th4ts_4_l0t_0f_pl4c3s_2_lO0k_fa04427c}  Get_aHEAD    Explanation:  After launching the instance, I found a simple website with two buttons ‚Äî one red and one blue. Clicking them changed the background color accordingly (red or blue).I intercepted the button requests using Burp Suite, and noticed they were being sent as POST requests.    Out of curiosity, I changed the request method to HEAD ‚Äî and that‚Äôs when the flag was returned in the response headers!  Flag: picoCTF{r3j3ct_th3_du4l1ty_775f2530}  dont-use-client-side    Explanation:  After launching the instance, I was presented with a page that asked for a password.  I inspected the page source and found a JavaScript function responsible for verifying the password. The logic revealed multiple substring checks to validate specific segments of the password.    By analyzing the script, I pieced together the correct password from the substring checks and that was the flag.  Flag: picoCTF{no_clients_plz_b706c5}  logon    Explanation:  After launching the instance, the website loaded a login page with username and password fields. Upon logging in, I inspected the cookies and noticed there was no input sanitization. One of the cookies was named something like admin and was set to false. I manually changed the value of the admin cookie to true using browser dev tools.    After refreshing the page, the website treated me as an admin and displayed the flag directly on the webpage.  Flag: picoCTF{th3_c0nsp1r4cy_l1v3s_d1c24fef}  Insp3ct0r    Explanation:  After launching the instance, a static webpage was loaded. Given the challenge name Inspector, I decided to inspect the site thoroughly using browser developer tools.By checking the HTML, CSS, and JavaScript source files, I discovered three parts of the flag hidden across the code in comments.After collecting all the parts and combining them, I successfully reconstructed the full flag.  Flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?832b0699}  Where are the robots    Explanation: After launching the instance, I noticed the challenge name hinted at something related to robots.txt.I manually visited /robots.txt by appending it to the URL and found a disallowed path:  Disallow: /8028f.html  I navigated to /8028f.html in the browser ‚Äî and the flag was displayed on the page.  Flag: picoCTF{ca1cu1at1ng_Mach1n3s_8028f} "
  },
  
  {
    "title": "Welcome to My Blog",
    "url": "/posts/WelcomeToMyBlog/",
    "categories": "blog, cybersecurity",
    "tags": "others",
    "date": "2025-06-11 00:00:00 +0530",
    "content": "Hello and Welcome! üëã  I‚Äôm Pavitralaxmi Pulakhandam, and this is my corner of the internet ‚Äî where cybersecurity meets curiosity.  Here, you‚Äôll find my thoughts, lessons, and experiences as I dive deep into the world of:  üö© Capture The Flag (CTF) Challenges Breakdowns of real challenges, creative exploits, and the logic behind the hacks.  üîê Cybersecurity Concepts &amp; Tools From everyday techniques to powerful tools ‚Äî if I use it or learn it, you‚Äôll read about it here.  üõ† Projects I love building, experimenting, and applying security knowledge to practical use cases. Expect walkthroughs and open-source snippets.  üèÖ Personal Milestones My wins, certifications, collaborations, and proud moments from the ever-evolving infosec journey.    Why This Blog?  The field of cybersecurity is huge and ever-changing. Instead of just keeping notes to myself, I decided to create a space that could:  ‚úÖ Help others navigate similar challenges ‚úÖ Contribute to the global hacker and learner community ‚úÖ Document my personal learning trail and growth    What‚Äôs Next?  I‚Äôll be posting regularly ‚Äî from CTF writeups to exploit techniques, cyber news reactions, and project breakdowns. Whether you‚Äôre a beginner or a seasoned pro, there‚Äôs something for everyone.  Stay curious. Stay ethical. And stay tuned! üî•  Y0RU1CH1 "
  }
  
]

